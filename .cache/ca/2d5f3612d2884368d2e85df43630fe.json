{"id":"node_modules/brain.js/dist/recurrent/matrix/clone-negative.js","dependencies":[{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\clone-negative.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\package.json","includedInParent":true,"mtime":1555160889145},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\package.json","includedInParent":true,"mtime":1555160889068}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cloneNegative;\n/**\n *\n * @param {Matrix} product\n * @param {Matrix} left\n */\nfunction cloneNegative(product, left) {\n  product.rows = parseInt(left.rows);\n  product.columns = parseInt(left.columns);\n  product.weights = left.weights.slice(0);\n  product.deltas = left.deltas.slice(0);\n  for (var i = 0; i < left.weights.length; i++) {\n    product.weights[i] = -left.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n","map":{"version":3,"sources":["../../../src/recurrent/matrix/clone-negative.js"],"names":["cloneNegative","product","left","rows","parseInt","columns","weights","slice","deltas","i","length"],"mappings":";;;;;kBAKwBA,a;AALxB;;;;;AAKe,SAASA,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;AACnDD,UAAQE,IAAR,GAAeC,SAASF,KAAKC,IAAd,CAAf;AACAF,UAAQI,OAAR,GAAkBD,SAASF,KAAKG,OAAd,CAAlB;AACAJ,UAAQK,OAAR,GAAkBJ,KAAKI,OAAL,CAAaC,KAAb,CAAmB,CAAnB,CAAlB;AACAN,UAAQO,MAAR,GAAiBN,KAAKM,MAAL,CAAYD,KAAZ,CAAkB,CAAlB,CAAjB;AACA,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIP,KAAKI,OAAL,CAAaI,MAAjC,EAAyCD,GAAzC,EAA8C;AAC5CR,YAAQK,OAAR,CAAgBG,CAAhB,IAAqB,CAACP,KAAKI,OAAL,CAAaG,CAAb,CAAtB;AACAR,YAAQO,MAAR,CAAeC,CAAf,IAAoB,CAApB;AACD;AACF","file":"clone-negative.js","sourcesContent":["/**\n *\n * @param {Matrix} product\n * @param {Matrix} left\n */\nexport default function cloneNegative(product, left) {\n  product.rows = parseInt(left.rows);\n  product.columns = parseInt(left.columns);\n  product.weights = left.weights.slice(0);\n  product.deltas = left.deltas.slice(0);\n  for (let i = 0; i < left.weights.length; i++) {\n    product.weights[i] = -left.weights[i];\n    product.deltas[i] = 0;\n  }\n}\n"]}},"hash":"cec91e1f569bbded1363fcfc83c4576f","cacheData":{"env":{}}}