{"id":"node_modules/brain.js/dist/recurrent/gru.js","dependencies":[{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\gru.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\package.json","includedInParent":true,"mtime":1555160889145},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\package.json","includedInParent":true,"mtime":1555160889068},{"name":"./matrix","loc":{"line":9,"column":22},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\gru.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\index.js"},{"name":"./matrix/random-matrix","loc":{"line":13,"column":28},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\gru.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\random-matrix.js"},{"name":"./rnn","loc":{"line":17,"column":19},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\gru.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\rnn.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _matrix = require('./matrix');\n\nvar _matrix2 = _interopRequireDefault(_matrix);\n\nvar _randomMatrix = require('./matrix/random-matrix');\n\nvar _randomMatrix2 = _interopRequireDefault(_randomMatrix);\n\nvar _rnn = require('./rnn');\n\nvar _rnn2 = _interopRequireDefault(_rnn);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar GRU = function (_RNN) {\n  _inherits(GRU, _RNN);\n\n  function GRU() {\n    _classCallCheck(this, GRU);\n\n    return _possibleConstructorReturn(this, (GRU.__proto__ || Object.getPrototypeOf(GRU)).apply(this, arguments));\n  }\n\n  _createClass(GRU, [{\n    key: 'getModel',\n    value: function getModel(hiddenSize, prevSize) {\n      return {\n        // update Gate\n        //wzxh\n        updateGateInputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wzhh\n        updateGateHiddenMatrix: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bz\n        updateGateBias: new _matrix2.default(hiddenSize, 1),\n\n        // reset Gate\n        //wrxh\n        resetGateInputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wrhh\n        resetGateHiddenMatrix: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //br\n        resetGateBias: new _matrix2.default(hiddenSize, 1),\n\n        // cell write parameters\n        //wcxh\n        cellWriteInputMatrix: new _randomMatrix2.default(hiddenSize, prevSize, 0.08),\n        //wchh\n        cellWriteHiddenMatrix: new _randomMatrix2.default(hiddenSize, hiddenSize, 0.08),\n        //bc\n        cellWriteBias: new _matrix2.default(hiddenSize, 1)\n      };\n    }\n\n    /**\n     *\n     * @param {Equation} equation\n     * @param {Matrix} inputMatrix\n     * @param {Matrix} previousResult\n     * @param {Object} hiddenLayer\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'getEquation',\n    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n      var sigmoid = equation.sigmoid.bind(equation);\n      var add = equation.add.bind(equation);\n      var multiply = equation.multiply.bind(equation);\n      var multiplyElement = equation.multiplyElement.bind(equation);\n      var tanh = equation.tanh.bind(equation);\n      var allOnes = equation.allOnes.bind(equation);\n      var cloneNegative = equation.cloneNegative.bind(equation);\n\n      // update gate\n      var updateGate = sigmoid(add(add(multiply(hiddenLayer.updateGateInputMatrix, inputMatrix), multiply(hiddenLayer.updateGateHiddenMatrix, previousResult)), hiddenLayer.updateGateBias));\n\n      // reset gate\n      var resetGate = sigmoid(add(add(multiply(hiddenLayer.resetGateInputMatrix, inputMatrix), multiply(hiddenLayer.resetGateHiddenMatrix, previousResult)), hiddenLayer.resetGateBias));\n\n      // cell\n      var cell = tanh(add(add(multiply(hiddenLayer.cellWriteInputMatrix, inputMatrix), multiply(hiddenLayer.cellWriteHiddenMatrix, multiplyElement(resetGate, previousResult))), hiddenLayer.cellWriteBias));\n\n      // compute hidden state as gated, saturated cell activations\n      // negate updateGate\n      return add(multiplyElement(add(allOnes(updateGate.rows, updateGate.columns), cloneNegative(updateGate)), cell), multiplyElement(previousResult, updateGate));\n    }\n  }]);\n\n  return GRU;\n}(_rnn2.default);\n\nexports.default = GRU;\n","map":{"version":3,"sources":["../../src/recurrent/gru.js"],"names":["GRU","hiddenSize","prevSize","updateGateInputMatrix","RandomMatrix","updateGateHiddenMatrix","updateGateBias","Matrix","resetGateInputMatrix","resetGateHiddenMatrix","resetGateBias","cellWriteInputMatrix","cellWriteHiddenMatrix","cellWriteBias","equation","inputMatrix","previousResult","hiddenLayer","sigmoid","bind","add","multiply","multiplyElement","tanh","allOnes","cloneNegative","updateGate","resetGate","cell","rows","columns","RNN"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,G;;;;;;;;;;;6BACVC,U,EAAYC,Q,EAAU;AAC7B,aAAO;AACL;AACA;AACAC,+BAAuB,IAAIC,sBAAJ,CAAiBH,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAHlB;AAIL;AACAG,gCAAwB,IAAID,sBAAJ,CAAiBH,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CALnB;AAML;AACAK,wBAAgB,IAAIC,gBAAJ,CAAWN,UAAX,EAAuB,CAAvB,CAPX;;AASL;AACA;AACAO,8BAAsB,IAAIJ,sBAAJ,CAAiBH,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAXjB;AAYL;AACAO,+BAAuB,IAAIL,sBAAJ,CAAiBH,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CAblB;AAcL;AACAS,uBAAe,IAAIH,gBAAJ,CAAWN,UAAX,EAAuB,CAAvB,CAfV;;AAiBL;AACA;AACAU,8BAAsB,IAAIP,sBAAJ,CAAiBH,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAnBjB;AAoBL;AACAU,+BAAuB,IAAIR,sBAAJ,CAAiBH,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CArBlB;AAsBL;AACAY,uBAAe,IAAIN,gBAAJ,CAAWN,UAAX,EAAuB,CAAvB;AAvBV,OAAP;AAyBD;;AAED;;;;;;;;;;;gCAQYa,Q,EAAUC,W,EAAaC,c,EAAgBC,W,EAAa;AAC9D,UAAIC,UAAUJ,SAASI,OAAT,CAAiBC,IAAjB,CAAsBL,QAAtB,CAAd;AACA,UAAIM,MAAMN,SAASM,GAAT,CAAaD,IAAb,CAAkBL,QAAlB,CAAV;AACA,UAAIO,WAAWP,SAASO,QAAT,CAAkBF,IAAlB,CAAuBL,QAAvB,CAAf;AACA,UAAIQ,kBAAkBR,SAASQ,eAAT,CAAyBH,IAAzB,CAA8BL,QAA9B,CAAtB;AACA,UAAIS,OAAOT,SAASS,IAAT,CAAcJ,IAAd,CAAmBL,QAAnB,CAAX;AACA,UAAIU,UAAUV,SAASU,OAAT,CAAiBL,IAAjB,CAAsBL,QAAtB,CAAd;AACA,UAAIW,gBAAgBX,SAASW,aAAT,CAAuBN,IAAvB,CAA4BL,QAA5B,CAApB;;AAEA;AACA,UAAIY,aAAaR,QACfE,IACEA,IACEC,SACEJ,YAAYd,qBADd,EAEEY,WAFF,CADF,EAKEM,SACEJ,YAAYZ,sBADd,EAEEW,cAFF,CALF,CADF,EAWEC,YAAYX,cAXd,CADe,CAAjB;;AAgBA;AACA,UAAIqB,YAAYT,QACZE,IACEA,IACEC,SACEJ,YAAYT,oBADd,EAEEO,WAFF,CADF,EAKEM,SACEJ,YAAYR,qBADd,EAEEO,cAFF,CALF,CADF,EAWEC,YAAYP,aAXd,CADY,CAAhB;;AAgBA;AACA,UAAIkB,OAAOL,KACTH,IACEA,IACEC,SACEJ,YAAYN,oBADd,EAEEI,WAFF,CADF,EAKEM,SACEJ,YAAYL,qBADd,EAEEU,gBACEK,SADF,EAEEX,cAFF,CAFF,CALF,CADF,EAcEC,YAAYJ,aAdd,CADS,CAAX;;AAmBA;AACA;AACA,aAAOO,IACLE,gBACEF,IACEI,QAAQE,WAAWG,IAAnB,EAAyBH,WAAWI,OAApC,CADF,EAEEL,cAAcC,UAAd,CAFF,CADF,EAKEE,IALF,CADK,EAQLN,gBACEN,cADF,EAEEU,UAFF,CARK,CAAP;AAaD;;;;EAnH8BK,a;;kBAAZ/B,G","file":"gru.js","sourcesContent":["import Matrix from './matrix';\nimport RandomMatrix from './matrix/random-matrix';\nimport RNN from './rnn';\n\nexport default class GRU extends RNN {\n  getModel(hiddenSize, prevSize) {\n    return {\n      // update Gate\n      //wzxh\n      updateGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wzhh\n      updateGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bz\n      updateGateBias: new Matrix(hiddenSize, 1),\n\n      // reset Gate\n      //wrxh\n      resetGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wrhh\n      resetGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //br\n      resetGateBias: new Matrix(hiddenSize, 1),\n\n      // cell write parameters\n      //wcxh\n      cellWriteInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wchh\n      cellWriteHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bc\n      cellWriteBias: new Matrix(hiddenSize, 1)\n    };\n  }\n\n  /**\n   *\n   * @param {Equation} equation\n   * @param {Matrix} inputMatrix\n   * @param {Matrix} previousResult\n   * @param {Object} hiddenLayer\n   * @returns {Matrix}\n   */\n  getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n    let sigmoid = equation.sigmoid.bind(equation);\n    let add = equation.add.bind(equation);\n    let multiply = equation.multiply.bind(equation);\n    let multiplyElement = equation.multiplyElement.bind(equation);\n    let tanh = equation.tanh.bind(equation);\n    let allOnes = equation.allOnes.bind(equation);\n    let cloneNegative = equation.cloneNegative.bind(equation);\n\n    // update gate\n    let updateGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.updateGateInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.updateGateHiddenMatrix,\n            previousResult\n          )\n        ),\n        hiddenLayer.updateGateBias\n      )\n    );\n\n    // reset gate\n    let resetGate = sigmoid(\n        add(\n          add(\n            multiply(\n              hiddenLayer.resetGateInputMatrix,\n              inputMatrix\n            ),\n            multiply(\n              hiddenLayer.resetGateHiddenMatrix,\n              previousResult\n            )\n          ),\n          hiddenLayer.resetGateBias\n        )\n    );\n\n    // cell\n    let cell = tanh(\n      add(\n        add(\n          multiply(\n            hiddenLayer.cellWriteInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.cellWriteHiddenMatrix,\n            multiplyElement(\n              resetGate,\n              previousResult\n            )\n          )\n        ),\n        hiddenLayer.cellWriteBias\n      )\n    );\n\n    // compute hidden state as gated, saturated cell activations\n    // negate updateGate\n    return add(\n      multiplyElement(\n        add(\n          allOnes(updateGate.rows, updateGate.columns),\n          cloneNegative(updateGate)\n        ),\n        cell\n      ),\n      multiplyElement(\n        previousResult,\n        updateGate\n      )\n    );\n  }\n}\n"]}},"hash":"d4d429bf20282ad22b86cad92c078482","cacheData":{"env":{}}}