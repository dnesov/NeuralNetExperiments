{"id":"node_modules/thaw.js/dist/thaw.js","dependencies":[{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\thaw.js\\dist\\thaw.js.map","includedInParent":true,"mtime":1515295606000},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\package.json","includedInParent":true,"mtime":1555160889145},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\thaw.js\\package.json","includedInParent":true,"mtime":1555160889061},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\thaw.js\\.babelrc","includedInParent":true,"mtime":1514774337000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.thaw = thaw;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//private variables\nvar thawing = false;\nvar thaws = [];\n\n/**\n * thaw an array of items\n * @param {Array} items\n * @param {Object} [options]\n * @constructor\n */\n\nvar Thaw = function () {\n  _createClass(Thaw, null, [{\n    key: \"stopAll\",\n\n\n    /**\n     * Stops all Thaw instances\n     */\n    value: function stopAll() {\n      for (var i = 0; i < thaws.length; i++) {\n        thaws[i].stop();\n      }\n    }\n  }, {\n    key: \"defaultSettings\",\n\n    /**\n     *\n     * @type {{each: null, done: null}}\n     */\n    get: function get() {\n      return {\n        each: null,\n        done: null\n      };\n    }\n\n    /**\n     * returns if Thaw.js is thawing\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isThawing\",\n    get: function get() {\n      return thawing;\n    }\n  }]);\n\n  function Thaw(items) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Thaw);\n\n    var _constructor$defaultS = _extends({}, this.constructor.defaultSettings, options),\n        each = _constructor$defaultS.each,\n        done = _constructor$defaultS.done;\n\n    this.items = items;\n    this.i = 0;\n    this.options = options;\n    var tick = this.tick = function () {\n      if (_this.i < 0) return;\n\n      _this.timeout = setTimeout(tick, 0);\n\n      if (thawing) return;\n      var item = items[_this.i];\n      if (_this.i >= items.length) {\n        if (done !== null) {\n          thawing = true;\n          done(item, _this.i);\n          thawing = false;\n        }\n\n        _this.i = -1;\n        clearTimeout(_this.timeout);\n        return;\n      }\n      if (each !== null) {\n        thawing = true;\n        each(item, _this.i);\n        thawing = false;\n      } else if (item !== undefined) {\n        item();\n      }\n      _this.i++;\n    };\n\n    thaws.push(this);\n    if (!options.delay) {\n      tick();\n    }\n  }\n\n  /**\n   * readies thaw to continue\n   * @returns {boolean} if had to get ready\n   */\n\n\n  _createClass(Thaw, [{\n    key: \"makeReady\",\n    value: function makeReady() {\n      if (this.i < 0) {\n        this.i = this.items.length;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Adds an item to the end of this instance of Thaw and readies Thaw to process it\n     * @param item\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var doTick = this.makeReady();\n\n      this.items.push(item);\n\n      if (doTick) {\n        this.tick();\n      }\n      return this;\n    }\n\n    /**\n     * Inserts an item just after the current item being processed in Thaw and readies Thaw to process it\n     * @param item\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(item) {\n      var doTick = this.makeReady();\n\n      this.items.splice(this.i, 0, item);\n\n      if (doTick) {\n        this.tick();\n      }\n\n      return this;\n    }\n\n    /**\n     * Adds an Array to the end of this instance of Thaw and readies Thaw to process it\n     * @param {Array} items\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"addArray\",\n    value: function addArray(items) {\n      var doTick = this.makeReady();\n\n      this.items = this.items.concat(items);\n\n      if (doTick) {\n        this.tick();\n      }\n\n      return this;\n    }\n\n    /**\n     * Inserts an Array just after the current item being processed in Thaw and readies Thaw to process them\n     * @param {Array} items\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"insertArray\",\n    value: function insertArray(items) {\n      var doTick = this.makeReady();\n      var left = this.items;\n      var middle = items;\n      var right = this.items.splice(this.i, this.items.length - this.i + 1);\n\n      this.items = left.concat(middle, right);\n\n      if (doTick) {\n        this.tick();\n      }\n      return this;\n    }\n\n    /**\n     * Stops this instance of Thaw\n     * @returns {Thaw}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.i = -1;\n      clearTimeout(this.timeout);\n      if (this.options.done) {\n        this.options.done();\n      }\n      return this;\n    }\n  }]);\n\n  return Thaw;\n}();\n\n/**\n * simple thaw\n * @param {Array} items\n * @param {Object} [options]\n * @returns Thaw\n */\n\n\nexports.default = Thaw;\nfunction thaw(items) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return new Thaw(items, options);\n}\n","map":{"version":3,"sources":["../src/thaw.js"],"names":["thaw","thawing","thaws","Thaw","i","length","stop","each","done","items","options","constructor","defaultSettings","tick","timeout","setTimeout","item","clearTimeout","undefined","push","delay","doTick","makeReady","splice","concat","left","middle","right"],"mappings":"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","file":"thaw.js","sourcesContent":["//private variables\nlet thawing = false;\nlet thaws = [];\n\n/**\n * thaw an array of items\n * @param {Array} items\n * @param {Object} [options]\n * @constructor\n */\nexport default class Thaw {\n  /**\n   *\n   * @type {{each: null, done: null}}\n   */\n  static get defaultSettings() {\n    return {\n      each: null,\n      done: null\n    };\n  }\n\n  /**\n   * returns if Thaw.js is thawing\n   * @returns {boolean}\n   */\n  static get isThawing() {\n    return thawing;\n  }\n\n  /**\n   * Stops all Thaw instances\n   */\n  static stopAll() {\n    for(let i = 0;i< thaws.length; i++) {\n      thaws[i].stop();\n    }\n  }\n\n  constructor(items, options = {}) {\n    const { each, done } = {...this.constructor.defaultSettings, ...options};\n    this.items = items;\n    this.i = 0;\n    this.options = options;\n    const tick = this.tick = () => {\n      if (this.i < 0) return;\n\n      this.timeout = setTimeout(tick, 0);\n\n      if (thawing) return;\n      const item = items[this.i];\n      if (this.i >= items.length) {\n        if (done !== null) {\n          thawing = true;\n          done(item, this.i);\n          thawing = false;\n        }\n\n        this.i = -1;\n        clearTimeout(this.timeout);\n        return;\n      }\n      if (each !== null) {\n        thawing = true;\n        each(item, this.i);\n        thawing = false;\n      } else if (item !== undefined) {\n        item();\n      }\n      this.i++;\n    };\n\n    thaws.push(this);\n    if (!options.delay) {\n      tick();\n    }\n  }\n\n  /**\n   * readies thaw to continue\n   * @returns {boolean} if had to get ready\n   */\n  makeReady() {\n    if (this.i < 0) {\n      this.i = this.items.length;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Adds an item to the end of this instance of Thaw and readies Thaw to process it\n   * @param item\n   * @returns {Thaw}\n   */\n  add(item) {\n    const doTick = this.makeReady();\n\n    this.items.push(item);\n\n    if (doTick) {\n      this.tick();\n    }\n    return this;\n  }\n\n  /**\n   * Inserts an item just after the current item being processed in Thaw and readies Thaw to process it\n   * @param item\n   * @returns {Thaw}\n   */\n  insert(item) {\n    const doTick = this.makeReady();\n\n    this.items.splice(this.i, 0, item);\n\n    if (doTick) {\n      this.tick();\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds an Array to the end of this instance of Thaw and readies Thaw to process it\n   * @param {Array} items\n   * @returns {Thaw}\n   */\n  addArray(items) {\n    const doTick = this.makeReady();\n\n    this.items = this.items.concat(items);\n\n    if (doTick) {\n      this.tick();\n    }\n\n    return this;\n  }\n\n  /**\n   * Inserts an Array just after the current item being processed in Thaw and readies Thaw to process them\n   * @param {Array} items\n   * @returns {Thaw}\n   */\n  insertArray(items) {\n    const doTick = this.makeReady();\n    const left = this.items;\n    const middle = items;\n    const right = this.items.splice(this.i, (this.items.length - this.i) + 1);\n\n    this.items = left.concat(middle, right);\n\n    if (doTick) {\n      this.tick();\n    }\n    return this;\n  }\n\n  /**\n   * Stops this instance of Thaw\n   * @returns {Thaw}\n   */\n  stop() {\n    this.i = -1;\n    clearTimeout(this.timeout);\n    if (this.options.done) {\n      this.options.done();\n    }\n    return this;\n  }\n}\n\n/**\n * simple thaw\n * @param {Array} items\n * @param {Object} [options]\n * @returns Thaw\n */\nexport function thaw(items, options = {}) {\n  return new Thaw(items, options);\n}"]}},"hash":"5788332d3b8bf05b1602d14e0c4b69d2","cacheData":{"env":{}}}