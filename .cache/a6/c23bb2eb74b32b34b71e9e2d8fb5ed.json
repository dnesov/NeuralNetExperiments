{"id":"node_modules/brain.js/dist/recurrent/matrix/equation.js","dependencies":[{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\package.json","includedInParent":true,"mtime":1555160889145},{"name":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\package.json","includedInParent":true,"mtime":1555160889068},{"name":"./","loc":{"line":9,"column":16},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\index.js"},{"name":"./ones-matrix","loc":{"line":13,"column":26},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\ones-matrix.js"},{"name":"./copy","loc":{"line":17,"column":20},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\copy.js"},{"name":"./clone-negative","loc":{"line":21,"column":30},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\clone-negative.js"},{"name":"./add","loc":{"line":25,"column":20},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\add.js"},{"name":"./add-b","loc":{"line":29,"column":20},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\add-b.js"},{"name":"./all-ones","loc":{"line":33,"column":24},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\all-ones.js"},{"name":"./multiply","loc":{"line":37,"column":25},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\multiply.js"},{"name":"./multiply-b","loc":{"line":41,"column":25},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\multiply-b.js"},{"name":"./multiply-element","loc":{"line":45,"column":32},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\multiply-element.js"},{"name":"./multiply-element-b","loc":{"line":49,"column":32},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\multiply-element-b.js"},{"name":"./relu","loc":{"line":53,"column":21},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\relu.js"},{"name":"./relu-b","loc":{"line":57,"column":21},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\relu-b.js"},{"name":"./row-pluck","loc":{"line":61,"column":24},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\row-pluck.js"},{"name":"./row-pluck-b","loc":{"line":65,"column":25},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\row-pluck-b.js"},{"name":"./sigmoid","loc":{"line":69,"column":24},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\sigmoid.js"},{"name":"./sigmoid-b","loc":{"line":73,"column":24},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\sigmoid-b.js"},{"name":"./tanh","loc":{"line":77,"column":21},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\tanh.js"},{"name":"./tanh-b","loc":{"line":81,"column":21},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\tanh-b.js"},{"name":"./softmax","loc":{"line":85,"column":23},"parent":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\equation.js","resolved":"C:\\Users\\dnesov\\Documents\\GitHub\\NeuralNetExperiments\\node_modules\\brain.js\\dist\\recurrent\\matrix\\softmax.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ = require('./');\n\nvar _2 = _interopRequireDefault(_);\n\nvar _onesMatrix = require('./ones-matrix');\n\nvar _onesMatrix2 = _interopRequireDefault(_onesMatrix);\n\nvar _copy = require('./copy');\n\nvar _copy2 = _interopRequireDefault(_copy);\n\nvar _cloneNegative2 = require('./clone-negative');\n\nvar _cloneNegative3 = _interopRequireDefault(_cloneNegative2);\n\nvar _add2 = require('./add');\n\nvar _add3 = _interopRequireDefault(_add2);\n\nvar _addB = require('./add-b');\n\nvar _addB2 = _interopRequireDefault(_addB);\n\nvar _allOnes2 = require('./all-ones');\n\nvar _allOnes3 = _interopRequireDefault(_allOnes2);\n\nvar _multiply2 = require('./multiply');\n\nvar _multiply3 = _interopRequireDefault(_multiply2);\n\nvar _multiplyB = require('./multiply-b');\n\nvar _multiplyB2 = _interopRequireDefault(_multiplyB);\n\nvar _multiplyElement2 = require('./multiply-element');\n\nvar _multiplyElement3 = _interopRequireDefault(_multiplyElement2);\n\nvar _multiplyElementB = require('./multiply-element-b');\n\nvar _multiplyElementB2 = _interopRequireDefault(_multiplyElementB);\n\nvar _relu2 = require('./relu');\n\nvar _relu3 = _interopRequireDefault(_relu2);\n\nvar _reluB = require('./relu-b');\n\nvar _reluB2 = _interopRequireDefault(_reluB);\n\nvar _rowPluck = require('./row-pluck');\n\nvar _rowPluck2 = _interopRequireDefault(_rowPluck);\n\nvar _rowPluckB = require('./row-pluck-b');\n\nvar _rowPluckB2 = _interopRequireDefault(_rowPluckB);\n\nvar _sigmoid2 = require('./sigmoid');\n\nvar _sigmoid3 = _interopRequireDefault(_sigmoid2);\n\nvar _sigmoidB = require('./sigmoid-b');\n\nvar _sigmoidB2 = _interopRequireDefault(_sigmoidB);\n\nvar _tanh2 = require('./tanh');\n\nvar _tanh3 = _interopRequireDefault(_tanh2);\n\nvar _tanhB = require('./tanh-b');\n\nvar _tanhB2 = _interopRequireDefault(_tanhB);\n\nvar _softmax = require('./softmax');\n\nvar _softmax2 = _interopRequireDefault(_softmax);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Equation = function () {\n  function Equation() {\n    _classCallCheck(this, Equation);\n\n    this.inputRow = 0;\n    this.inputValue = null;\n    this.states = [];\n  }\n\n  /**\n   * connects two matrices together by add\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n\n\n  _createClass(Equation, [{\n    key: 'add',\n    value: function add(left, right) {\n      if (left.weights.length !== right.weights.length) {\n        throw new Error('misaligned matrices');\n      }\n      var product = new _2.default(left.rows, left.columns);\n      this.states.push({\n        left: left,\n        right: right,\n        product: product,\n        forwardFn: _add3.default,\n        backpropagationFn: _addB2.default\n      });\n      return product;\n    }\n\n    /**\n     *\n     * @param {Number} rows\n     * @param {Number} columns\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'allOnes',\n    value: function allOnes(rows, columns) {\n      var product = new _2.default(rows, columns);\n      this.states.push({\n        left: product,\n        product: product,\n        forwardFn: _allOnes3.default\n      });\n      return product;\n    }\n\n    /**\n     *\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'cloneNegative',\n    value: function cloneNegative(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _cloneNegative3.default\n      });\n      return product;\n    }\n\n    /**\n     * connects two matrices together by subtract\n     * @param {Matrix} left\n     * @param {Matrix} right\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'subtract',\n    value: function subtract(left, right) {\n      if (left.weights.length !== right.weights.length) {\n        throw new Error('misaligned matrices');\n      }\n      return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);\n    }\n\n    /**\n     * connects two matrices together by multiply\n     * @param {Matrix} left\n     * @param {Matrix} right\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'multiply',\n    value: function multiply(left, right) {\n      if (left.columns !== right.rows) {\n        throw new Error('misaligned matrices');\n      }\n      var product = new _2.default(left.rows, right.columns);\n      this.states.push({\n        left: left,\n        right: right,\n        product: product,\n        forwardFn: _multiply3.default,\n        backpropagationFn: _multiplyB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects two matrices together by multiplyElement\n     * @param {Matrix} left\n     * @param {Matrix} right\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'multiplyElement',\n    value: function multiplyElement(left, right) {\n      if (left.weights.length !== right.weights.length) {\n        throw new Error('misaligned matrices');\n      }\n      var product = new _2.default(left.rows, left.columns);\n      this.states.push({\n        left: left,\n        right: right,\n        product: product,\n        forwardFn: _multiplyElement3.default,\n        backpropagationFn: _multiplyElementB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects a matrix to relu\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'relu',\n    value: function relu(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _relu3.default,\n        backpropagationFn: _reluB2.default\n      });\n      return product;\n    }\n\n    /**\n     * copy a matrix\n     * @param {Matrix} input\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'input',\n    value: function input(_input) {\n      var _this = this;\n\n      this.states.push({\n        product: _input,\n        forwardFn: function forwardFn(product) {\n          product.weights = _input.weights = _this.inputValue;\n        }\n      });\n      return _input;\n    }\n\n    /**\n     * connects a matrix via a row\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'inputMatrixToRow',\n    value: function inputMatrixToRow(m) {\n      var self = this;\n      var product = new _2.default(m.columns, 1);\n      this.states.push({\n        left: m,\n        get right() {\n          return self.inputRow;\n        },\n        product: product,\n        forwardFn: _rowPluck2.default,\n        backpropagationFn: _rowPluckB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects a matrix to sigmoid\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'sigmoid',\n    value: function sigmoid(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _sigmoid3.default,\n        backpropagationFn: _sigmoidB2.default\n      });\n      return product;\n    }\n\n    /**\n     * connects a matrix to tanh\n     * @param {Matrix} m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'tanh',\n    value: function tanh(m) {\n      var product = new _2.default(m.rows, m.columns);\n      this.states.push({\n        left: m,\n        product: product,\n        forwardFn: _tanh3.default,\n        backpropagationFn: _tanhB2.default\n      });\n      return product;\n    }\n\n    /**\n     *\n     * @param m\n     * @returns {Matrix}\n     */\n\n  }, {\n    key: 'observe',\n    value: function observe(m) {\n      var iForward = 0;\n      var iBackpropagate = 0;\n      this.states.push({\n        forwardFn: function forwardFn() {\n          iForward++;\n        },\n        backpropagationFn: function backpropagationFn() {\n          iBackpropagate++;\n        }\n      });\n      return m;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'runIndex',\n    value: function runIndex() {\n      var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this.inputRow = rowIndex;\n      var state = void 0;\n      for (var i = 0, max = this.states.length; i < max; i++) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('forwardFn')) {\n          continue;\n        }\n        state.forwardFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'runInput',\n    value: function runInput(inputValue) {\n      this.inputValue = inputValue;\n      var state = void 0;\n      for (var i = 0, max = this.states.length; i < max; i++) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('forwardFn')) {\n          continue;\n        }\n        state.forwardFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'backpropagate',\n    value: function backpropagate() {\n      var i = this.states.length;\n      var state = void 0;\n      while (i-- > 0) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('backpropagationFn')) {\n          continue;\n        }\n        state.backpropagationFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n\n    /**\n     * @patam {Number} [rowIndex]\n     * @output {Matrix}\n     */\n\n  }, {\n    key: 'backpropagateIndex',\n    value: function backpropagateIndex() {\n      var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this.inputRow = rowIndex;\n\n      var i = this.states.length;\n      var state = void 0;\n      while (i-- > 0) {\n        state = this.states[i];\n        if (!state.hasOwnProperty('backpropagationFn')) {\n          continue;\n        }\n        state.backpropagationFn(state.product, state.left, state.right);\n      }\n\n      return state.product;\n    }\n  }, {\n    key: 'predictTarget',\n    value: function predictTarget(input, target) {\n      var output = this.runInput(input);\n      var errorSum = 0;\n      for (var i = 0; i < output.weights.length; i++) {\n        var error = output.weights[i] - target[i];\n        // set gradients into log probabilities\n        errorSum += Math.abs(error);\n        // write gradients into log probabilities\n        output.deltas[i] = error;\n      }\n      return errorSum;\n    }\n  }, {\n    key: 'predictTargetIndex',\n    value: function predictTargetIndex(input, target) {\n      var output = this.runIndex(input);\n      // set gradients into log probabilities\n      var logProbabilities = output; // interpret output as log probabilities\n      var probabilities = (0, _softmax2.default)(output); // compute the softmax probabilities\n\n      // write gradients into log probabilities\n      logProbabilities.deltas = probabilities.weights.slice(0);\n      logProbabilities.deltas[target] -= 1;\n\n      // accumulate base 2 log prob and do smoothing\n      return -Math.log2(probabilities.weights[target]);\n    }\n  }]);\n\n  return Equation;\n}();\n\nexports.default = Equation;\n","map":{"version":3,"sources":["../../../src/recurrent/matrix/equation.js"],"names":["Equation","inputRow","inputValue","states","left","right","weights","length","Error","product","Matrix","rows","columns","push","forwardFn","add","backpropagationFn","addB","allOnes","m","cloneNegative","multiply","multiplyB","multiplyElement","multiplyElementB","relu","reluB","input","self","rowPluck","rowPluckB","sigmoid","sigmoidB","tanh","tanhB","iForward","iBackpropagate","rowIndex","state","i","max","hasOwnProperty","target","output","runInput","errorSum","error","Math","abs","deltas","runIndex","logProbabilities","probabilities","slice","log2"],"mappings":"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","file":"equation.js","sourcesContent":["import Matrix from './';\nimport OnesMatrix from './ones-matrix';\nimport copy from './copy';\nimport cloneNegative from './clone-negative';\nimport add from './add';\nimport addB from './add-b';\nimport allOnes from './all-ones';\nimport multiply from './multiply';\nimport multiplyB from './multiply-b';\nimport multiplyElement from './multiply-element';\nimport multiplyElementB from './multiply-element-b';\nimport relu from './relu';\nimport reluB from './relu-b';\nimport rowPluck from './row-pluck';\nimport rowPluckB from './row-pluck-b';\nimport sigmoid from './sigmoid';\nimport sigmoidB from './sigmoid-b';\nimport tanh from './tanh';\nimport tanhB from './tanh-b';\nimport softmax from './softmax';\n\nexport default class Equation {\n  constructor() {\n    this.inputRow = 0;\n    this.inputValue = null;\n    this.states = [];\n  }\n\n  /**\n   * connects two matrices together by add\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  add(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: add,\n      backpropagationFn: addB\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param {Number} rows\n   * @param {Number} columns\n   * @returns {Matrix}\n   */\n  allOnes(rows, columns) {\n    let product = new Matrix(rows, columns);\n    this.states.push({\n      left: product,\n      product: product,\n      forwardFn: allOnes\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  cloneNegative(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: cloneNegative\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by subtract\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  subtract(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);\n  }\n\n  /**\n   * connects two matrices together by multiply\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiply(left, right) {\n    if (left.columns !== right.rows) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, right.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: multiply,\n      backpropagationFn: multiplyB\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by multiplyElement\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiplyElement(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: multiplyElement,\n      backpropagationFn: multiplyElementB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to relu\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  relu(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: relu,\n      backpropagationFn: reluB\n    });\n    return product;\n  }\n\n  /**\n   * copy a matrix\n   * @param {Matrix} input\n   * @returns {Matrix}\n   */\n  input(input) {\n    this.states.push({\n      product: input,\n      forwardFn: (product) => {\n        product.weights = input.weights = this.inputValue;\n      }\n    });\n    return input;\n  }\n\n  /**\n   * connects a matrix via a row\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  inputMatrixToRow(m) {\n    let self = this;\n    let product = new Matrix(m.columns, 1);\n    this.states.push({\n      left: m,\n      get right () {\n        return self.inputRow;\n      },\n      product: product,\n      forwardFn: rowPluck,\n      backpropagationFn: rowPluckB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to sigmoid\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  sigmoid(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: sigmoid,\n      backpropagationFn: sigmoidB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to tanh\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  tanh(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: tanh,\n      backpropagationFn: tanhB\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param m\n   * @returns {Matrix}\n   */\n  observe(m) {\n    let iForward = 0;\n    let iBackpropagate = 0;\n    this.states.push({\n      forwardFn: function() {\n        iForward++;\n      },\n      backpropagationFn: function() {\n        iBackpropagate++;\n      }\n    });\n    return m;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  runIndex(rowIndex = 0) {\n    this.inputRow = rowIndex;\n    let state;\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('forwardFn')) {\n        continue;\n      }\n      state.forwardFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  runInput(inputValue) {\n    this.inputValue = inputValue;\n    let state;\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('forwardFn')) {\n        continue;\n      }\n      state.forwardFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  backpropagate() {\n    let i = this.states.length;\n    let state;\n    while (i-- > 0) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('backpropagationFn')) {\n        continue;\n      }\n      state.backpropagationFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  backpropagateIndex(rowIndex = 0) {\n    this.inputRow = rowIndex;\n\n    let i = this.states.length;\n    let state;\n    while (i-- > 0) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('backpropagationFn')) {\n        continue;\n      }\n      state.backpropagationFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  predictTarget(input, target) {\n    const output = this.runInput(input);\n    let errorSum = 0;\n    for (let i = 0; i < output.weights.length; i++) {\n      const error = output.weights[i] - target[i];\n      // set gradients into log probabilities\n      errorSum += Math.abs(error);\n      // write gradients into log probabilities\n      output.deltas[i] = error;\n    }\n    return errorSum;\n  }\n\n  predictTargetIndex(input, target) {\n    const output = this.runIndex(input);\n    // set gradients into log probabilities\n    const logProbabilities = output; // interpret output as log probabilities\n    let probabilities = softmax(output); // compute the softmax probabilities\n\n    // write gradients into log probabilities\n    logProbabilities.deltas = probabilities.weights.slice(0);\n    logProbabilities.deltas[target] -= 1;\n\n    // accumulate base 2 log prob and do smoothing\n    return -Math.log2(probabilities.weights[target]);\n  }\n}\n"]}},"hash":"5d7774b9d52304c2ab7d6cad9640ab67","cacheData":{"env":{}}}